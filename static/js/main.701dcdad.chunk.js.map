{"version":3,"sources":["components/transactions.jsx","components/balances.jsx","App.js","reportWebVitals.js","index.js"],"names":["Transaction","transactionChild","class","map","transaction","hash","blockNumber","from","to","web3","utils","fromWei","value","Balances","balance","date","address","App","useState","transactions","setTransactions","searchTrans","setSearchTrans","searchBlock","setSearchBlock","blockNum","setBlockNum","setWeb3","query","setQuery","setDate","finder","setFinder","setBalance","url","useEffect","console","log","loadBlockchain","getTransactions","a","window","ethereum","Web3","enable","getEthBalance","historicTimestamp","Date","getTime","fetch","callResult","json","blockJson","intAddress","eth","getBalance","result","balancePre","className","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.701dcdad.chunk.js","sourcesContent":["import React from 'react';\r\nimport web3 from 'web3'\r\nimport './components.css'\r\n\r\nconst Transaction = ({transactionChild}) => {\r\n    return(\r\n      <div>\r\n        <table class=\"styled-table\">\r\n            <thead>\r\n                <tr>\r\n                  <th>Transaction Hash</th>\r\n                  <th>Block Number</th>\r\n                  <th>From</th>\r\n                  <th>To</th>\r\n                  <th>Eth Value</th>\r\n                </tr>\r\n            </thead>\r\n              <tbody>\r\n                {transactionChild.map(transaction => (\r\n                    <tr key = {transaction.hash}>\r\n                    <td>{transaction.hash}</td>\r\n                    <td>{transaction.blockNumber}</td>\r\n                    <td>{transaction.from}</td>\r\n                    <td>{transaction.to}</td>\r\n                    <td>{web3.utils.fromWei(transaction.value)}</td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n)}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport web3 from 'web3'\r\nimport './components.css'\r\n\r\nconst Balances = ({balance, date, address}) => {\r\n    return(\r\n        <div>\r\n        <table class=\"styled-table\">\r\n            <thead>\r\n                <tr>\r\n                  <th>Wallet</th>\r\n                  <th>Date</th>\r\n                  <th>Token</th>\r\n                  <th>Balance</th>\r\n                </tr>\r\n            </thead>\r\n              <tbody>\r\n                    <tr>\r\n                    <td>{address}</td>\r\n                    <td>{date}</td>\r\n                    <td>Eth</td>\r\n                    <td>{web3.utils.fromWei(balance)}</td>\r\n                  </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Balances","import React, {useEffect, useState} from 'react';\nimport Web3 from 'web3';\nimport Transaction from './components/transactions'\nimport Balances from './components/balances'\nimport './App.css';\n\n\n\nconst App = () => {\n  \n  //Set a lazy address to initialize computations (no need for update function)\n  const address= '0xAc1cC3E2be6a0267a4feb54190bFC2c06D4AE3dd'\n\n\n  //Variables with unique modifier\n  const [transactions, setTransactions] = useState([])\n  const [searchTrans, setSearchTrans] = useState('')\n  const [searchBlock, setSearchBlock] = useState('')\n  const [blockNum, setBlockNum] = useState('')\n  const [web3, setWeb3] = useState({})\n  const [query, setQuery] = useState([address, '0'])\n  const [date, setDate] = useState('')\n  const [finder, setFinder] = useState(true)\n  const [balance, setBalance] = useState('')\n\n  // Etherscan lazy API to get transactions\n  const url = `https://api-rinkeby.etherscan.io/api?module=account&action=txlist&address=${query[0]}&startblock=${query[1]}&endblock=99999999&sort=asc&apikey=YourApiKeyToken`\n\n  useEffect(() => {\n    console.log('Effect is running')\n    loadBlockchain()\n    getTransactions()\n  }, [query])\n\n  //Initialize and enable web3 provider \n  const loadBlockchain = async () => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      setWeb3(web3)\n      try {\n        await window.ethereum.enable()\n      } catch (error) {\n        // User denied account access\n        console.log(error);\n      }\n    }\n  }\n\n//Balance retriever function\n//Gets the timestamp from an specific date\n//Fetches the block number at specific timestamp\n//Via web3 you get the balance of ETH from intAddress at specific block number\nconst getEthBalance = async () => {\n    const historicTimestamp = new Date(date).getTime();\n    const timestamp = historicTimestamp/1000\n    setBlockNum(`https://api-rinkeby.etherscan.io/api?module=block&action=getblocknobytime&timestamp=${timestamp}&closest=before&apikey=YourApiKeyToken`)\n    let callResult = await fetch(blockNum)\n    let blockJson = await callResult.json()\n    const intAddress = searchTrans == '' ? address : searchTrans\n    const balancePre = await web3.eth.getBalance(intAddress, blockJson.result)\n    const balanceAct = balancePre != 'undefined' ? balancePre : 0\n    setBalance(balanceAct)\n}\n\n//Transactions explorer\n\n  const getTransactions = async () => {\n    let result = await fetch(url)\n    let json = await result.json()\n    setTransactions(json.result)\n  }\n\n  //Update wallet address\n  const updateSearchTrans = e => {\n    setSearchTrans(e.target.value)\n  }\n\n  //Update block number\n  const updateSearchBlock = e => {\n    setSearchBlock(e.target.value)\n  }\n  \n  //Update Search of the transaction explorer\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery([searchTrans, searchBlock])\n    setSearchTrans('')\n    setSearchBlock('0')\n  }\n\n\n  //Balances explorer\n\n  const updateSetDate = e => {\n    setDate(e.target.value)\n  }\n\n  //Set trans table\n  const finderSetterTrans = () => {\n    setFinder(true)\n  }\n\n  //Set balance table\n  const finderSetterBal = () => {\n    setFinder(false)\n  }\n\n\n  return (\n    <div>\n      <header>\n        <span className = \"trans-header\">Transaction Scanner</span>\n      </header>\n      <body>\n        <div className = \"row-ordering\">\n          <form onSubmit ={getSearch} className = \"form-transaction\">\n            <div >\n            <span>Transactions by wallet</span>\n              <div class=\"input-group trans-input\">\n                <span class=\"input-group-text\">Wallet</span>\n                <input type=\"text\" placeholder=\"e.g. 0x7b9b6897b09AFac20186FE4aA8e54021B43175E6\" value = {searchTrans} onChange ={updateSearchTrans} className= \"form-control\" required></input>\n              </div>\n              <div class=\"input-group trans-input\">\n                <span class=\"input-group-text\">Starting Block</span>\n                <input type=\"text\" placeholder=\"e.g. 0\" value = {searchBlock} onChange ={updateSearchBlock} className= \"form-control\"></input>\n              </div>\n            </div>\n            <button  type=\"submit\" class=\"btn btn-secondary\" onClick= {finderSetterTrans}>Search Transactions</button>\n          </form>\n          <form onSubmit ={getEthBalance} className = \"form-transaction\">\n            <div >\n            <span> ETH Balances by wallet (Make sure you have access to archive node)</span>\n              <div class=\"input-group trans-input\">\n                <span class=\"input-group-text\">Date</span>\n                <input type=\"text\" placeholder=\"e.g. July 24, 2021 00:00:00\" value = {date} onChange ={updateSetDate} className= \"form-control\" required></input>\n              </div>\n            </div>\n            <button  type=\"submit\" class=\"btn btn-secondary\" onClick= {finderSetterBal}>Search Balance</button>\n          </form>\n        </div>\n        <div className = \"div-table\">\n          {\n          finder \n          ? <Transaction\n          transactionChild = {transactions}/> \n          : <Balances\n          balance = {balance}\n          date = {date}\n          address = {searchTrans == '' ? address : searchTrans}/>\n          }\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}